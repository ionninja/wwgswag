<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="API Reference" id="API_Reference">

    <code-block lang="mermaid">
        graph TD
        A[Start] --> B[Send API Request]
        B --> C{Include JSON Body}
        C -->|Yes| D[Include api_login and api_password]
        C -->|No| E[Return Error: Missing Credentials]
        D --> F[Process Request]
        F --> G{Callback Communication}
        G -->|Balance| H[Return Player Balance]
        G -->|Debit/Credit| I[Update Player Balance]
        H --> J[Successful Response]
        I --> K[Successful Response]
        J --> L[End]
        K --> L[End]
        E --> L[End]
    </code-block>

    <p>Spinshield Games API</p>

    <p>This is the API for Spinshield Games. You can use this API to manage player accounts and free rounds. For more information, visit <a href="https://spinshield.com">Spinshield</a>.</p>

    <p>Some useful links:</p>
    <list>
        <li><a href="https://github.com/spinshield/spinshield-api">The Spinshield repository</a></li>
        <li><a href="https://github.com/spinshield/spinshield-api/blob/master/src/main/resources/openapi.yaml">The source API definition for Spinshield</a></li>
    </list>

    <p>## General Info</p>

    <p>### Seamless Wallet</p>
    <p>We make use of the seamless wallet principal. This means that you control the player's balance/funds completely. We simply let you know what happens on the game and inform you of each game action.</p>

    <p>### PHP Client</p>
    <p>If you are using PHP on your project, we have a composer package available to assist you with integrating our games API. For more details check the package on GitHub or run <code>composer require spinshield/spinclient</code> to get started.</p>

    <p>### API Methods</p>
    <p>When you send requests to our game server, this should be a POST request and include JSON body content. Your JSON body content should always include your <code>api_login</code> and your <code>api_password</code>, these details can be found within the backoffice.</p>

    <code-block>
        {
        "api_login": "d13b1ceb-6209-4163-b1cf-f304c28b81ec",
        "api_password": "dqRin2nfLosij2n88",
        ...
        }
    </code-block>

    <p>### Callback Communication</p>
    <p>Our game server sends GET requests to your callback URL and always expects a JSON response that includes error code and player balance. If player balance cannot be retrieved for whatever reason, you should return 0 as balance.</p>

    <p>All balance must be returned as integer and in cents, that means if your player's balance is $2.50 this should be returned as 250.</p>

    <p>#### Successful Response</p>
    <code-block>
        {
        "error": 0,
        "balance": 250
        }
    </code-block>

    <p>#### Insufficient Balance Response</p>
    <code-block>
        {
        "error": 1,
        "balance": 250
        }
    </code-block>

    <p>#### Processing Error (for example player not found or invalid signature)</p>
    <code-block>
        {
        "error": 2,
        "balance": 0
        }
    </code-block>

    <p>### Callback Action: balance</p>
    <p>This callback will be sent to your callback URL, specified within the backoffice. We will send this callback at the start of the game. You should always return balance in integer format.</p>

    <p>The call_id is a unique id sent with each callback and can be considered the transaction id.</p>

    <p>#### CallbackBalance</p>
    <code-block>
        {
        "username": "yourPlayerId9959",
        "currency": "USD",
        "action": "balance",
        "call_id": "e2b801a1-e098-411c-8940-00514cb8070c",
        "timestamp": "1696463571",
        "key": "6c4e5fd14e796284b327bb4f9603aee4"
        }
    </code-block>

    <p>#### Responses</p>
    <p>Balance must be returned as integer and in cents, that means if your player's balance is $2.50 this should be returned as 250.</p>

    <p>##### Successful Response:</p>
    <code-block>
        {
        "error": 0,
        "balance": 250
        }
    </code-block>

    <p>##### Insufficient Balance</p>
    <code-block>
        {
        "error": 1,
        "balance": 250
        }
    </code-block>

    <p>##### Processing Error (for example player not found or invalid signature)</p>
    <code-block>
        {
        "error": 2,
        "balance": 0
        }
    </code-block>

    <p>### Callback Action: debit/credit</p>
    <p>Depending on the callback action you should credit/debit your player's balance for the amount given on callback.</p>

    <p>If the player does not have enough balance on debit action, you should return the insufficient balance response (error: 1) like shown below.</p>

    <p>The call_id is a unique id sent with each callback and can be considered the transaction id.</p>

    <p>#### Important note</p>
    <p>You should allow credit action and debit action independently of each other.</p>

    <p>There are cases where a credit callback can be sent without first sending a debit callback, for example in case of rollback/refund system activated.</p>

    <p>In some game providers there may be occurrences where a new round_id is made on each game action, for example when a bonus game is won on some providers this might be sent as individual game rounds and will thus only send credit action.</p>

    <p>This may also affect gameplay_final in particular cases.</p>

    <p>#### Requests</p>
    <p>Requests are sent as GET to your callback URL, which is specified on your API key configuration.</p>

    <p>#### Spin</p>
    <code-block>
        {
        "amount": 100,
        "username": "yourPlayerId9959",
        "currency": "USD",
        "action": "debit",
        "gameplay_final": 0,
        "type": "spin",
        "round_id": "312875958396",
        "game_id": "onlyplay/LigaFortunaMegaways",
        "call_id": "f51fce58-2e0e-461b-8a0c-87ecba0600c2",
        "timestamp": "1696463565",
        "key": "4e54de0b17adf322365c0540bd7db57a"
        }
    </code-block>

    <p>#### Free Round Spin Callback</p>
    <p>This callback is sent when the player is playing on gifted free rounds, after using the addFreeRounds method.</p>

    <p>You should not deduct a player's balance on debit callbacks when the type variable is set to bonus_fs.</p>

    <code-block>
        {
        "amount": 25,
        "currency": "CAD",
        "action": "debit",
        "gameplay_final": 0,
        "type": "bonus_fs",
        "round_id": "1074911949",
        "game_id": "platipus/luckycat",
        "username": "wmlmhohuhfs",
        "call_id": "6ce7154b-be61-4bab-b5a6-642488064c41",
        "operator_id": 24,
        "timestamp": "1696463565",
        "key": "ed3a34c119wec67fb8e37691b5885f0",
        "freespins": {
        "total": 20,
        "performed": 3
        }
        }
    </code-block>

    <p>#### Responses</p>
    <p>Balance must be returned as integer and in cents, that means if your player's balance is $2.50 this should be returned as 250.</p>

    <p>##### Successful Response</p>
    <code-block>
        {
        "error": 0,
        "balance": 250
        }
    </code-block>

    <p>##### Insufficient Balance</p>
    <code-block>
        {
        "error": 1,
        "balance": 250
        }
    </code-block>

    <p>##### Processing Error (for example player not found or invalid signature)</p>
    <code-block>
        {
        "error": 2,
        "balance": 0
        }
    </code-block>

    <p>### Callback Validation</p>
    <p>Each callback sent includes key variable and timestamp variable. This makes you able to verify the origin of the callback is coming from us.</p>

    <p>The key is constructed by the timestamp variable + salt_key. The salt key is unique and specific per API key, you can set a new salt key in the backoffice.</p>

    <p>#### Key Construct (Javascript)</p>
    <code-block>
        md5($timestamp + $saltkey);
    </code-block>

    <p>#### Key Construct (PHP)</p>
    <code-block>
        md5($timestamp.$saltkey);
    </code-block>

    <p>To validate the signature, simply create the signature then check if it is the same as the key variable sent on the callback.</p>

    <p>If the signature does not match return response:</p>
    <code-block>
        {
        "error": 2,
        "balance": 0
        }
    </code-block>

    <title>Best Practices</title>
    <p>To ensure optimal performance and avoid common pitfalls, please follow these best practices when using the Spinshield Games API.</p>

    <title>Caching Game List</title>
    <p>It is important to cache the game list to reduce the number of API calls and improve performance. Here are some guidelines:</p>
    <list>
        <li>Cache the game list on your server, not on the player side.</li>
        <li>Do not call the game list API more than once per hour.</li>
        <li>Import the game list into your own database to create custom game categories and improve performance.</li>
        <li>Cache the game list at the API route level if you are using frameworks like Next.js, so it is cached for all your players.</li>
    </list>

    <title>Storage Recommendations</title>
    <p>Proper storage of the game list is crucial to avoid unnecessary API calls. Follow these recommendations:</p>
    <list>
        <li>Avoid storing the game list in local storage or session storage on the client side.</li>
        <li>Store the game list on your server to ensure it is cached and available for all players.</li>
    </list>

    <title>Rate Limiting</title>
    <p>To prevent excessive API calls and potential rate limiting, adhere to the following practices:</p>
    <list>
        <li>Ensure the game list is cached and not fetched on every player visit.</li>
        <li>Implement server-side caching to reduce the frequency of API calls.</li>
    </list>

    <title>General Tips</title>
    <p>Here are some additional tips to improve your integration with the Spinshield Games API:</p>
    <list>
        <li>Regularly review and update your caching strategy to ensure optimal performance.</li>
        <li>Monitor API usage and adjust caching intervals as needed to avoid rate limiting.</li>
    </list>

    <title>Optimizing API Requests</title>
    <p>To minimize latency and ensure fast response times, follow these best practices for optimizing API requests:</p>
    <list>
        <li>Use a Content Delivery Network (CDN) to cache static assets and reduce load times.</li>
        <li>Implement lazy loading for non-critical resources to improve initial load times.</li>
        <li>Use HTTP/2 to multiplex multiple requests over a single connection, reducing latency.</li>
        <li>Minimize the size of API responses by only requesting necessary data fields.</li>
        <li>Use gzip or Brotli compression to reduce the size of API responses.</li>
    </list>

    <title>Reducing Asynchronous Times</title>
    <p>To reduce asynchronous times and improve the user experience, consider the following practices:</p>
    <list>
        <li>Optimize database queries to ensure they are as fast as possible.</li>
        <li>Use connection pooling to reuse database connections and reduce overhead.</li>
        <li>Implement background processing for non-critical tasks to keep the main thread responsive.</li>
        <li>Use Web Workers to offload heavy computations from the main thread.</li>
        <li>Leverage browser caching to store frequently accessed data locally.</li>
    </list>

    <title>Minimizing Latency</title>
    <p>To minimize latency and ensure fast response times, follow these best practices:</p>
    <list>
        <li>Deploy your servers in regions closest to your users to reduce network latency.</li>
        <li>Use a global load balancer to distribute traffic evenly across multiple servers.</li>
        <li>Optimize your server infrastructure to handle high traffic loads efficiently.</li>
        <li>Monitor and analyze network performance to identify and address bottlenecks.</li>
    </list>

</topic>