<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="API Reference" id="API_Reference">

    <p>openapi: 3.0.3
info:
  title: Spinshield Games API
  description: >-
    This is the API for Spinshield Games. You can use this API to manage player
    accounts and free rounds.

    For more information, visit [Spinshield](https://spinshield.com).

    Some useful links:

    - [The Spinshield repository](https://github.com/spinshield/spinshield-api)

    - [The source API definition for
    Spinshield](https://github.com/spinshield/spinshield-api/blob/master/src/main/resources/openapi.yaml)

    ## General Info

    ### Seamless Wallet

    We make use of the seamless wallet principal. This means that you control
    the player's balance/funds completely.

    We simply let you know what happens on the game and inform you of each game
    action.

    ### PHP Client

    If you are using PHP on your project, we have a composer package available
    to assist you with integrating our games API.

    For more details check the package on github or run `composer require
    spinshield/spinclient` to get started.

    ### API Methods

    When you send requests to our game server, this should be POST request and
    include JSON body content.

    Your JSON body content should always include your `api_login` and your
    `api_password`, these details can be found within the backoffice.

    ```json
    {
      "api_login" : "d13b1ceb-6209-4163-b1cf-f304c28b81ec",
      "api_password": "dqRin2nfLosij2n88",
      ...
    }
    ```

    ### Callback Communication

    Our game server sends GET requests to your callback URL and always expects a
    JSON response that includes error code and player balance. If player balance
    can not be retrieved for whatever reason, you should return 0 as balance.

    All balance must be returned as integer and in cents, that means if your
    player's balance is 2.50$ this should be returned as 250.

    #### Successful Response

    ```json
    {
      "error": 0,
      "balance": 250
    }
    ```

    #### Insufficient Balance Response

    ```json
    {
      "error": 1,
      "balance": 250
    }
    ```

    #### Processing Error (for example player not found or invalid signature)

    ```json
    {
      "error": 2,
      "balance": 0
    }
    ```

    ### Callback Action: balance

    This callback will be sent to your callback URL, specified within the
    backoffice. We will send this callback at start of game. You should always
    return balance in integer format.

    The call_id is a unique id sent with each callback and can be considered the
    transaction id.

    #### CallbackBalance

    ```json
    {
      "username": "yourPlayerId9959",
      "currency": "USD",
      "action": "balance",
      "call_id": "e2b801a1-e098-411c-8940-00514cb8070c",
      "timestamp": "1696463571",
      "key": "6c4e5fd14e796284b327bb4f9603aee4"
    }
    ```

    #### Responses

    Balance must be returned as integer and in cents, that means if your
    player's balance is 2.50$ this should be returned as 250.

    ##### Successful Response:

    ```json
    {
      "error": 0,
      "balance": 250
    }
    ```

    ##### Insufficient Balance

    ```json
    {
      "error": 1,
      "balance": 250
    }
    ```

    ##### Processing Error (for example player not found or invalid signature)

    ```json
    {
      "error": 2,
      "balance": 0
    }
    ```

    ### Callback Action: debit/credit

    Depending on the callback action you should credit/debit your player's
    balance for the amount given on callback.

    If player does not have enough balance on debit action, you should return
    the insufficient balance response (error: 1) like shown below.

    The call_id is a unique id sent with each callback and can be considered the
    transaction id.

    #### Important note

    You should allow credit action and debit action independently of each other.

    There are cases where a credit callback can be sent without first sending a
    debit callback, per example in case of rollback/refund system activated.

    In some game providers there may be occurrences where new round_id is made
    on each game action, for example when bonus game won on some providers this
    might be sent as individual game rounds and will thus only send credit
    action.

    This may also affect gameplay_final in particular cases.

    #### Requests

    Requests are sent as GET to your callback URL, which is specified on your
    API key configuration.

    #### Spin Callback

    ```json
    {
      "amount": 100,
      "username": "yourPlayerId9959",
      "currency": "USD",
      "action": "debit",
      "gameplay_final": 0,
      "type": "spin",
      "round_id": "312875958396",
      "game_id": "onlyplay/LigaFortunaMegaways",
      "call_id": "f51fce58-2e0e-461b-8a0c-87ecba0600c2",
      "timestamp": "1696463565",
      "key": "4e54de0b17adf322365c0540bd7db57a"
    }
    ```

    #### Free Round Spin Callback

    This callback is sent when player is playing on gifted free rounds, after
    using the addFreeRounds method.

    You should not deduct a player's balance on debit callbacks when type
    variable is set to bonus_fs.

    ```json
    {
      "amount": 25,
      "currency": "CAD",
      "action": "debit",
      "gameplay_final": 0,
      "type": "bonus_fs",
      "round_id": "1074911949",
      "game_id": "platipus/luckycat",
      "username": "wmlmhohuhfs",
      "call_id": "6ce7154b-be61-4bab-b5a6-642488064c41",
      "operator_id": 24,
      "timestamp": "1696463565",
      "key": "ed3a34c119wec67fb8e37691b5885f0",
      "freespins": {
          "total": 20,
          "performed": 3
      }
    }
    ```

    #### Responses

    Balance must be returned as integer and in cents, that means if your
    player's balance is 2.50$ this should be returned as 250.

    ##### Successful Response

    ```json
    {
      "error": 0,
      "balance": 250
    }
    ```

    ##### Insufficient Balance

    ```json
    {
      "error": 1,
      "balance": 250
    }
    ```

    ##### Processing Error (for example player not found or invalid signature)

    ```json
    {
      "error": 2,
      "balance": 0
    }
    ```

    ### Callback Validation

    Each callback sent includes key variable and timestamp variable. This makes
    you able to verify the origin of the callback is coming from us.

    The key is constructed by the timestamp variable + salt_key. The salt key is
    unique and specific per API key, you can set new salt key in the backoffice.

    #### Key Construct (Javascript)

    ```javascript
    md5($timestamp + $saltkey);
    ```

    #### Key Construct (PHP)

    ```php
    md5($timestamp.$saltkey);
    ```

    To validate the signature, simply create the signature then check if it is
    the same as the key variable sent on the callback.

    If the signature does not match return response:

    ```json
    {
      "error": 2,
      "balance": 0
    }
    ```
    </p>
</topic>